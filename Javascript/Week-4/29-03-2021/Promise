# PROMISE

A promise is an object that may produce a single value some time in the future: either a resolved value, or a reason that it’s not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.

# How Promises Work

A promise is an object which can be returned synchronously from an asynchronous function. It will be in one of 3 possible states:

-   **Fulfilled:** `onFulfilled()` will be called (e.g., `resolve()` was called)
-   **Rejected:** `onRejected()` will be called (e.g., `reject()` was called)
-   **Pending:** not yet fulfilled or rejected

A promise is **settled** if it’s not pending (it has been resolved or rejected). Sometimes people use _resolved_ and _settled_ to mean the same thing: _not pending_.

Once settled, a promise can not be resettled. Calling `resolve()` or `reject()` again will have no effect. The immutability of a settled promise is an important feature.


Examples:
```
let myPromise =  new  Promise(function(myResolve, myReject){

setTimeout(function(){ myResolve("I love you !!");}, 3000)

});

  

myPromise.then(function(value){

console.log(value);

});
This logs "I love you" to the console after 3 
```
